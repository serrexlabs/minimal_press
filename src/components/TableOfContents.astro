---
export interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

// Filter to only show h2 and h3
const tocHeadings = headings.filter(heading => heading.depth <= 3);
---

{tocHeadings.length > 0 && (
  <>
    <!-- Desktop TOC -->
    <nav class="toc-container" aria-label="Table of contents">
      <h3 class="toc-title">On this page</h3>
      <ul class="toc-list">
        {tocHeadings.map((heading) => (
          <li class={`toc-item toc-level-${heading.depth}`}>
            <a
              href={`#${heading.slug}`}
              class={`toc-link toc-${heading.depth}`}
              data-heading={heading.slug}
              aria-label={`Navigate to ${heading.text}`}
            >
              {heading.text}
            </a>
          </li>
        ))}
      </ul>
      
      <!-- Reading progress indicator -->
      <div class="reading-progress">
        <div class="progress-label">Reading Progress</div>
        <div class="progress-bar">
          <div class="progress-fill"></div>
        </div>
        <div class="progress-text">0%</div>
      </div>
    </nav>

    <!-- Mobile TOC Button -->
    <button class="mobile-toc-button" id="mobile-toc-button" aria-label="Table of contents">
      <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M3 5h2M8 5h9M3 10h2M8 10h9M3 15h2M8 15h9" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
      </svg>
    </button>

    <!-- Mobile TOC Overlay -->
    <div class="mobile-toc-overlay" id="mobile-toc-overlay" aria-hidden="true">
      <div class="mobile-toc-content">
        <div class="mobile-toc-header">
          <h3>On this page</h3>
          <button class="mobile-toc-close" id="mobile-toc-close" aria-label="Close table of contents">
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M15 5L5 15M5 5L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
          </button>
        </div>
        
        <ul class="mobile-toc-list">
          {tocHeadings.map((heading) => (
            <li class={`mobile-toc-item mobile-toc-level-${heading.depth}`}>
              <a
                href={`#${heading.slug}`}
                class={`mobile-toc-link mobile-toc-${heading.depth}`}
                data-heading={heading.slug}
                aria-label={`Navigate to ${heading.text}`}
              >
                {heading.text}
              </a>
            </li>
          ))}
        </ul>

        <!-- Mobile Reading Progress -->
        <div class="mobile-reading-progress">
          <div class="mobile-progress-label">Reading Progress</div>
          <div class="mobile-progress-bar">
            <div class="mobile-progress-fill"></div>
          </div>
          <div class="mobile-progress-text">0%</div>
        </div>
      </div>
    </div>
  </>
)}

<style>

  .toc-container {
    position: fixed;
    top: 32px;
    left: calc(50% + 400px + 32px);
    width: 260px;
    max-height: calc(100vh - 64px);
    overflow-y: auto;
    padding: 24px;
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    font-size: 14px;
    z-index: 100;
    margin: 0;
    display: none; /* Hidden by default, shown via media queries */
    /* Hardware acceleration for smooth performance */
    transform: translate3d(0, 0, 0);
    will-change: transform;
    /* Add shadow for visual separation */
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
    /* Smooth scrolling within TOC */
    scroll-behavior: smooth;
    /* Hide scrollbar but keep functionality */
    scrollbar-width: thin;
    scrollbar-color: var(--color-border) transparent;
  }

  .toc-title {
    font-size: 1rem;
    font-weight: 600;
    margin: 0 0 1rem 0;
    color: var(--color-text-primary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.75rem;
    border-bottom: 1px solid var(--color-border);
    padding-bottom: 0.5rem;
  }

  .toc-list {
    list-style: none;
    margin: 0;
    padding: 0;
    margin-bottom: 1.5rem;
  }

  .toc-item {
    margin-bottom: 0.25rem;
  }

  .toc-link {
    display: block;
    padding: 0.5rem 0;
    color: var(--color-text-secondary);
    text-decoration: none;
    border-left: 2px solid transparent;
    padding-left: 1rem;
    transition: all 0.2s ease;
    border-radius: 0 4px 4px 0;
    position: relative;
  }

  .toc-link:hover {
    color: var(--color-accent);
    border-left-color: var(--color-border);
    background: rgba(0, 122, 204, 0.05);
  }

  .toc-link.active {
    color: var(--color-accent);
    border-left-color: var(--color-accent);
    font-weight: 600;
    background: rgba(0, 122, 204, 0.1);
  }

  /* Indentation for different heading levels */
  .toc-level-2 .toc-link {
    padding-left: 1rem;
  }

  .toc-level-3 .toc-link {
    padding-left: 2rem;
    font-size: 0.8rem;
  }

  .reading-progress {
    border-top: 1px solid var(--color-border);
    padding-top: 1rem;
  }

  .progress-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text-secondary);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .progress-bar {
    height: 4px;
    background: var(--color-border);
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 0.5rem;
    position: relative;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--color-accent), #4facfe);
    transition: width 0.3s ease;
    width: 0%;
    border-radius: 2px;
  }

  .progress-text {
    font-size: 0.75rem;
    color: var(--color-text-tertiary);
    text-align: right;
  }

  /* Hide TOC scrollbar for WebKit browsers */
  .toc-container::-webkit-scrollbar {
    width: 4px;
  }

  .toc-container::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc-container::-webkit-scrollbar-thumb {
    background: var(--color-border);
    border-radius: 2px;
  }

  .toc-container::-webkit-scrollbar-thumb:hover {
    background: var(--color-text-tertiary);
  }

  /* Dark mode shadow adjustment */
  :global(.dark) .toc-container {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
  }

  /* Dark mode mobile button shadow */
  :global(.dark) .mobile-toc-button {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  :global(.dark) .mobile-toc-button:hover {
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.4);
  }

  /* Mobile TOC Button - Fixed floating button */
  .mobile-toc-button {
    display: none;
    position: fixed;
    bottom: 24px;
    right: 24px;
    background: var(--color-text-primary);
    color: var(--color-surface);
    border: none;
    border-radius: 50%;
    padding: 12px;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.2s ease;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    min-height: 48px;
    min-width: 48px;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0.1);
    tap-highlight-color: rgba(0, 0, 0, 0.1);
  }

  .mobile-toc-button:hover {
    background: var(--color-text-secondary);
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }

  .mobile-toc-button:active {
    transform: translateY(0);
  }

  /* Mobile TOC Overlay */
  .mobile-toc-overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 2000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
    -webkit-overflow-scrolling: touch;
  }

  .mobile-toc-overlay.active {
    opacity: 1;
    visibility: visible;
  }

  .mobile-toc-content {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: var(--color-surface);
    border-radius: 16px 16px 0 0;
    max-height: 80vh;
    overflow-y: auto;
    padding: 24px;
    transform: translateY(100%);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-overflow-scrolling: touch;
  }

  .mobile-toc-overlay.active .mobile-toc-content {
    transform: translateY(0);
  }

  .mobile-toc-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 1px solid var(--color-border);
  }

  .mobile-toc-header h3 {
    font-size: 18px;
    font-weight: 600;
    color: var(--color-text-primary);
    margin: 0;
  }

  .mobile-toc-close {
    background: none;
    border: none;
    color: var(--color-text-secondary);
    cursor: pointer;
    padding: 8px;
    border-radius: 6px;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 44px;
    min-width: 44px;
  }

  .mobile-toc-close:hover {
    background: var(--color-border);
    color: var(--color-text-primary);
  }

  /* Mobile TOC List */
  .mobile-toc-list {
    list-style: none;
    margin: 0 0 24px 0;
    padding: 0;
  }

  .mobile-toc-item {
    margin-bottom: 4px;
  }

  .mobile-toc-link {
    display: block;
    padding: 12px 16px;
    color: var(--color-text-secondary);
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.2s ease;
    font-size: 16px;
    line-height: 1.4;
    min-height: 44px;
    display: flex;
    align-items: center;
    -webkit-tap-highlight-color: rgba(0, 122, 204, 0.1);
    tap-highlight-color: rgba(0, 122, 204, 0.1);
  }

  .mobile-toc-link:hover {
    background: var(--color-border);
    color: var(--color-text-primary);
  }

  .mobile-toc-link.active {
    color: var(--color-accent);
    background: rgba(0, 122, 204, 0.1);
    font-weight: 500;
  }

  /* Mobile TOC indentation */
  .mobile-toc-level-2 .mobile-toc-link {
    padding-left: 16px;
  }

  .mobile-toc-level-3 .mobile-toc-link {
    padding-left: 32px;
    font-size: 15px;
  }

  /* Mobile Reading Progress */
  .mobile-reading-progress {
    border-top: 1px solid var(--color-border);
    padding-top: 16px;
  }

  .mobile-progress-label {
    font-size: 14px;
    font-weight: 500;
    color: var(--color-text-secondary);
    margin-bottom: 8px;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .mobile-progress-bar {
    height: 6px;
    background: var(--color-border);
    border-radius: 3px;
    overflow: hidden;
    margin-bottom: 8px;
    position: relative;
  }

  .mobile-progress-fill {
    height: 100%;
    background: linear-gradient(90deg, var(--color-accent), #4facfe);
    transition: width 0.3s ease;
    width: 0%;
    border-radius: 3px;
  }

  .mobile-progress-text {
    font-size: 14px;
    color: var(--color-text-tertiary);
    text-align: right;
  }

  /* Responsive positioning - match main layout system */
  
  /* Desktop Large (1400px+) - Show TOC next to content */
  @media (min-width: 1400px) {
    .toc-container {
      display: block;
      left: calc(50% + 400px + 32px);
    }
    
    .mobile-toc-button,
    .mobile-toc-overlay {
      display: none !important;
    }
  }

  /* Desktop Intermediate (1280px-1399px) - TOC at edge but near content */
  @media (min-width: 1280px) and (max-width: 1399px) {
    .toc-container {
      display: block;
      left: calc(50% + 400px + 32px);
    }
    
    .mobile-toc-button,
    .mobile-toc-overlay {
      display: none !important;
    }
  }

  /* Desktop Small and below - Hide desktop TOC, show mobile */
  @media (max-width: 1279px) {
    .toc-container {
      display: none;
    }
    
    .mobile-toc-button,
    .mobile-toc-overlay {
      display: flex;
    }
  }
</style>

<script>
  // Enhanced Table of Contents with scroll spy and reading progress
  document.addEventListener('DOMContentLoaded', () => {
    const tocContainer = document.querySelector('.toc-container');
    const tocLinks = document.querySelectorAll('.toc-link');
    const mobileTocLinks = document.querySelectorAll('.mobile-toc-link');
    const progressFill = document.querySelector('.progress-fill');
    const progressText = document.querySelector('.progress-text');
    const mobileProgressFill = document.querySelector('.mobile-progress-fill');
    const mobileProgressText = document.querySelector('.mobile-progress-text');
    
    // Mobile TOC elements
    const mobileTocButton = document.getElementById('mobile-toc-button');
    const mobileTocOverlay = document.getElementById('mobile-toc-overlay');
    const mobileTocClose = document.getElementById('mobile-toc-close');
    
    // Early return if no TOC links exist
    const allTocLinks = [...tocLinks, ...mobileTocLinks];
    if (allTocLinks.length === 0) return;
    
    const headings = Array.from(allTocLinks).map(link => {
      const slug = link.getAttribute('data-heading');
      const element = document.getElementById(slug!);
      return { link, element, slug };
    }).filter(item => item.element);
    
    if (headings.length === 0) return;
    
    // Ensure TOC visibility on resize
    function ensureTOCPositioning() {
      if (window.innerWidth >= 1200 && tocContainer) {
        tocContainer.style.display = 'block';
      } else if (tocContainer) {
        tocContainer.style.display = 'none';
      }
    }
    
    // Initialize positioning
    ensureTOCPositioning();
    
    // Update positioning on resize
    window.addEventListener('resize', ensureTOCPositioning);
    
    let activeHeading: HTMLAnchorElement | null = null;
    
    function updateActiveHeading() {
      const scrollY = window.scrollY;
      
      // Find the current heading
      let current: typeof headings[0] | null = null;
      
      for (let i = headings.length - 1; i >= 0; i--) {
        const heading = headings[i];
        if (!heading.element) continue;
        
        const rect = heading.element.getBoundingClientRect();
        const top = rect.top + scrollY - 100; // 100px offset for better UX
        
        if (scrollY >= top) {
          current = heading;
          break;
        }
      }
      
      // Update active states
      if (current && current.link !== activeHeading) {
        // Remove previous active
        if (activeHeading) {
          activeHeading.classList.remove('active');
        }
        
        // Add new active
        current.link.classList.add('active');
        activeHeading = current.link as HTMLAnchorElement;
        
        // Scroll the TOC to keep active item in view (without affecting main scroll)
        if (tocContainer && activeHeading) {
          const containerRect = tocContainer.getBoundingClientRect();
          const linkRect = activeHeading.getBoundingClientRect();
          const containerTop = containerRect.top;
          const containerBottom = containerRect.bottom;
          
          // Check if the active link is outside the visible area of TOC
          if (linkRect.top < containerTop || linkRect.bottom > containerBottom) {
            // Calculate the offset needed to center the active item
            const targetPosition = tocContainer.scrollTop + (linkRect.top - containerTop) - (containerRect.height / 2) + (linkRect.height / 2);
            
            // Smooth scroll within TOC
            tocContainer.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }
        }
      } else if (!current && activeHeading) {
        // Remove active if scrolled to top
        activeHeading.classList.remove('active');
        activeHeading = null;
      }
    }
    
    function updateReadingProgress() {
      const scrollTop = window.scrollY;
      const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollProgress = Math.min((scrollTop / documentHeight) * 100, 100);
      
      // Update desktop progress
      if (progressFill) {
        progressFill.style.width = `${scrollProgress}%`;
      }
      if (progressText) {
        progressText.textContent = `${Math.round(scrollProgress)}%`;
      }
      
      // Update mobile progress
      if (mobileProgressFill) {
        mobileProgressFill.style.width = `${scrollProgress}%`;
      }
      if (mobileProgressText) {
        mobileProgressText.textContent = `${Math.round(scrollProgress)}%`;
      }
    }
    
    // Update on scroll with throttling
    let ticking = false;
    function onScroll() {
      if (!ticking) {
        window.requestAnimationFrame(() => {
          updateActiveHeading();
          updateReadingProgress();
          ticking = false;
        });
        ticking = true;
      }
    }
    
    window.addEventListener('scroll', onScroll);
    updateActiveHeading(); // Initial update
    updateReadingProgress(); // Initial progress update
    
    // Smooth scroll on click with enhanced UX (for both desktop and mobile)
    allTocLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.slice(1);
        if (!targetId) return;
        
        const target = document.getElementById(targetId);
        if (!target) return;
        
        const offset = 80; // Offset for fixed header
        const targetPosition = target.getBoundingClientRect().top + window.scrollY - offset;
        
        // Add visual feedback
        link.style.transform = 'scale(0.98)';
        setTimeout(() => {
          link.style.transform = '';
        }, 150);
        
        window.scrollTo({
          top: targetPosition,
          behavior: 'smooth'
        });
        
        // Update URL without scrolling
        history.pushState(null, '', `#${targetId}`);
        
        // Close mobile TOC if open
        if (mobileTocOverlay?.classList.contains('active')) {
          closeMobileToc();
        }
      });
    });
    
    // Keyboard navigation support
    document.addEventListener('keydown', (e) => {
      if (!activeHeading) return;
      
      const currentIndex = Array.from(tocLinks).indexOf(activeHeading);
      let nextIndex = -1;
      
      if (e.key === 'ArrowDown' && e.altKey) {
        e.preventDefault();
        nextIndex = Math.min(currentIndex + 1, tocLinks.length - 1);
      } else if (e.key === 'ArrowUp' && e.altKey) {
        e.preventDefault();
        nextIndex = Math.max(currentIndex - 1, 0);
      }
      
      if (nextIndex !== -1) {
        const nextLink = allTocLinks[nextIndex] as HTMLElement;
        nextLink.click();
        nextLink.focus();
      }
    });

    // Mobile TOC functionality
    function openMobileToc() {
      if (mobileTocOverlay) {
        mobileTocOverlay.classList.add('active');
        mobileTocOverlay.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';
      }
    }

    function closeMobileToc() {
      if (mobileTocOverlay) {
        mobileTocOverlay.classList.remove('active');
        mobileTocOverlay.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
      }
    }

    // Mobile TOC button click
    mobileTocButton?.addEventListener('click', openMobileToc);

    // Mobile TOC close button click
    mobileTocClose?.addEventListener('click', closeMobileToc);

    // Close mobile TOC when clicking overlay
    mobileTocOverlay?.addEventListener('click', (e) => {
      if (e.target === mobileTocOverlay) {
        closeMobileToc();
      }
    });

    // Close mobile TOC on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && mobileTocOverlay?.classList.contains('active')) {
        closeMobileToc();
      }
    });
  });
</script>