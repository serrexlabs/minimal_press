---
import { getCollection } from 'astro:content';
import { findRelatedPosts } from '../utils/seo';

export interface Props {
  currentPost: {
    slug: string;
    data: {
      title: string;
      description?: string;
      tags?: string[];
      date: Date;
    };
  };
  maxResults?: number;
}

const { currentPost, maxResults = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// Find related posts
const relatedPosts = findRelatedPosts(
  {
    slug: currentPost.slug,
    tags: currentPost.data.tags,
    title: currentPost.data.title,
    description: currentPost.data.description,
  },
  allPosts,
  maxResults
);
---

{relatedPosts.length > 0 && (
  <section class="related-posts">
    <h3 class="related-posts-title">Related Articles</h3>
    <div class="related-posts-grid">
      {relatedPosts.map((post) => (
        <article class="related-post-card">
          <a href={`/blog/${post.slug}`} class="related-post-link">
            <h4 class="related-post-title">{post.data.title}</h4>
            {post.data.description && (
              <p class="related-post-description">{post.data.description}</p>
            )}
            <div class="related-post-meta">
              <time class="related-post-date">
                {new Date(post.data.date).toLocaleDateString('en-US', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric'
                })}
              </time>
              {post.data.tags && post.data.tags.length > 0 && (
                <div class="related-post-tags">
                  {post.data.tags.slice(0, 2).map(tag => (
                    <span class="related-post-tag">{tag}</span>
                  ))}
                </div>
              )}
            </div>
          </a>
        </article>
      ))}
    </div>
  </section>
)}

<style>
  .related-posts {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }

  .related-posts-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: var(--color-text-primary);
  }

  .related-posts-grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }

  .related-post-card {
    background: var(--color-surface);
    border: 1px solid var(--color-border);
    border-radius: 8px;
    padding: 1.5rem;
    transition: all 0.2s ease;
  }

  .related-post-card:hover {
    border-color: var(--color-accent);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .related-post-link {
    text-decoration: none;
    color: inherit;
    display: block;
  }

  .related-post-title {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--color-text-primary);
    line-height: 1.4;
  }

  .related-post-link:hover .related-post-title {
    color: var(--color-accent);
  }

  .related-post-description {
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    line-height: 1.5;
    margin-bottom: 1rem;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .related-post-meta {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    font-size: 0.85rem;
  }

  .related-post-date {
    color: var(--color-text-tertiary);
  }

  .related-post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .related-post-tag {
    background: var(--color-tag-bg);
    color: var(--color-tag-text);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .related-posts-grid {
      grid-template-columns: 1fr;
    }
    
    .related-post-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
  }
</style>